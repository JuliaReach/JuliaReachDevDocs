var documenterSearchIndex = {"docs":
[{"location":"release/#Releases-and-bots","page":"Releases and bots","title":"Releases and bots","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"This is a short step-by-step manual on how to make a new release of a package. In the process of maintaining a package, updating dependencies, etc., there are some \"bots\" (services) that are commonly used in Julia projects. Those are also mentioned in this section.","category":"page"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"Pages = [\"release.md\"]\nDepth = 3","category":"page"},{"location":"release/#Choosing-a-new-release-version","page":"Releases and bots","title":"Choosing a new release version","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"First you have to choose whether you want to create a patch release, a minor release, or a major release.","category":"page"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"Major releases are very rare cases for major breaking changes in the API, which should typically be avoided.\nMinor releases are used when some dependency has changed (e.g., a new dependency was added), a mild breaking change in the API was added, or some important feature was added.\nPatch releases are used for everything else.","category":"page"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"For more information, check Semantic Versioning.","category":"page"},{"location":"release/#Preparing-the-release","page":"Releases and bots","title":"Preparing the release","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"Edit the file Project.toml and change the version number of the package to the new version. Make a new pull request and wait until CI passes and the PR gets merged.","category":"page"},{"location":"release/#Creating-a-new-release","page":"Releases and bots","title":"Creating a new release","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"Choose the appropriate subsection for this step and locate the release notes. Usually we keep the release notes in the wiki part of the project (\"Release-log tracker\"). These release notes correspond to the development version of the package until the next release.","category":"page"},{"location":"release/#Creating-a-new-release-on-General-(Julia-ecosystem-packages-only)","page":"Releases and bots","title":"Creating a new release on General (Julia ecosystem packages only)","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"If the package is released in the Julia ecosystem, a pull request to General has to be made to make new versions available. Registrator is used for this purpose. Find the issue named Releases in the issue tracker and write the following comment.","category":"page"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"@JuliaRegistrator register()","category":"page"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"This will let Registrator trigger a pull request to General. Check that everything works there and then wait until the pull request gets merged. Then the TagBot will create a new release on Github. Finally, you need to manually write the release notes for that release.","category":"page"},{"location":"release/#Creating-a-new-release-on-Github","page":"Releases and bots","title":"Creating a new release on Github","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"If the package is not released in the Julia ecosystem, you can just manually create a release on Github with the corresponding release notes.","category":"page"},{"location":"release/#Clean-up-the-release-log","page":"Releases and bots","title":"Clean up the release log","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"Finally, remove the items from the release log in the wiki (keep the headlines, though).","category":"page"},{"location":"release/#Compatibility-bot","page":"Releases and bots","title":"Compatibility bot","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"The Julia package CompatHelper.jl can be used to automatically update the [compat] entries for your Julia package's dependencies. It is easy to install; just create and edit the file .github/workflows/CompatHelper.yml as described in CompatHelper.jl's documentation. Once installed, this github action will automatically create PRs to update compatibility bounds of the dependencies of the package.","category":"page"},{"location":"release/#Registrator-bot","page":"Releases and bots","title":"Registrator bot","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"The Registrator.jl bot is a github app that automates creation of registration pull requests for your Julia packages to the General registry. To install, just click on the installation button that can be found on Registrator.jl's documentation. Once installed, the usual procedure to register a new release is:","category":"page"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"The procedure for registering a new package is the same as for releasing a new version.","category":"page"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"Set your project's Project.toml version field in your repository to your new desired version.\nComment @JuliaRegistrator register on the commit/branch you want to register.\nEither rely on the TagBot GitHub Action to tag and make a github release automatically (recommended, see Tag bot below) or alternatively tag the release manually.","category":"page"},{"location":"release/#Tag-bot","page":"Releases and bots","title":"Tag bot","text":"","category":"section"},{"location":"release/","page":"Releases and bots","title":"Releases and bots","text":"The TagBot github action is used to automatically create tags, releases, and changelogs for your Julia packages when they're registered. It is easy to install; just create and edit the file .github/workflows/TagBot.yml as described in TagBot's documentation. Once installed, this github action will automatically create a release and tag a release log each time the package was registered using JuliaRegistrator @register.","category":"page"},{"location":"newpkg/#Adding-a-new-package","page":"Adding a new package","title":"Adding a new package","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"In this section we describe the usual procedure to add a new package.","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"Pages = [\"newpkg.md\"]\nDepth = 3","category":"page"},{"location":"newpkg/#Creating-the-GitHub-repository","page":"Adding a new package","title":"Creating the GitHub repository","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"To create an empty repository, go to your user name and click on New. If you have write access to the JuliaReach org, click on New on the top-right or go to the link Create a new repository.","category":"page"},{"location":"newpkg/#Creating-the-Julia-package","page":"Adding a new package","title":"Creating the Julia package","text":"","category":"section"},{"location":"newpkg/#Using-JuliaReachTemplatePkg","page":"Adding a new package","title":"Using JuliaReachTemplatePkg","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"The GitHub repository JuliaReachTemplatePkg contains a template package for JuliaReach projects.","category":"page"},{"location":"newpkg/#Using-PkgTemplates","page":"Adding a new package","title":"Using PkgTemplates","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"Alternatively, an easy way to create an empty package is to use PkgTemplates. An example is given below:","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"julia> using PkgTemplates\n\njulia> t = Template(; user=\"JuliaReach\", license=\"MIT\",\n                      authors=[\"Marcelo Forets\", \"BenoÃ®t Legat\", \"Christian Schilling\"],\n                      plugins=[TravisCI(), Codecov(), AppVeyor(), GitHubPages()])\n\njulia> generate(\"MathematicalSets\", t)","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"Some settings are used in JuliaReach's projects:","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"update the README\nadd the style for docs in docs/assets/juliareach.css","category":"page"},{"location":"newpkg/#Deploying-the-documentation","page":"Adding a new package","title":"Deploying the documentation","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"Follow the guidelines described in Documenter.jl's manual: Hosting documentation. In particular, copy the Documenter key from here.","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"After the first build, set up (i.e., protect, see below) the gh-pages branch and add links to the documentation in the README.md.","category":"page"},{"location":"newpkg/#Adding-requirements","page":"Adding a new package","title":"Adding requirements","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"These are links we have found useful:","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"Testing specific dependencies\nGetting a valid uuid:","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"julia> using Pkg\n\njulia> Pkg.METADATA_compatible_uuid(\"MyPackage\")\nUUID(\"b4f0291d-fe17-52bc-9479-3d1a343d9043\")","category":"page"},{"location":"newpkg/#Adding-members","page":"Adding a new package","title":"Adding members","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"Add members with the corresponding access rights under Settings/Manage access.","category":"page"},{"location":"newpkg/#Protecting-branches","page":"Adding a new package","title":"Protecting branches","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"Add rules for branch protection under Settings/Branches for the master and gh-pages branches (copy them from an existing repository).","category":"page"},{"location":"newpkg/#Publishing-packages","page":"Adding a new package","title":"Publishing packages","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"Install JuliaTeam Registrator (under Settings/Integrations & services).\nCopy the file .github/workflows/TagBot.yml from an existing repository.","category":"page"},{"location":"newpkg/#Reduce-repository-size","page":"Adding a new package","title":"Reduce repository size","text":"","category":"section"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"The page  https://github.com/settings/repositories lists each repo size.","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"To cleanup past docs preview folders, see clean-gh-pages.yml.","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"That works but it only removes the last preview for the current PR. And if the PR is closed before the preview is pushed, that run errors and does not remove the folder. To remove all previews from the history, one can do this locally:","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"git checkout gh-pages\ngit rm -rf \"previews/PR*\"\ngit commit -m \"delete previews\"\ngit branch gh-pages-new $(echo \"delete history\" | git commit-tree HEAD^{tree})\ngit push --force origin gh-pages-new:gh-pages\ngit checkout master\ngit branch -D gh-pages gh-pages-new","category":"page"},{"location":"newpkg/","page":"Adding a new package","title":"Adding a new package","text":"Something that can also help to shrink the local git size (especially after this change): git gc.","category":"page"},{"location":"about/#About","page":"About","title":"About","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"This page contains some general information about this repository.","category":"page"},{"location":"about/","page":"About","title":"About","text":"Pages = [\"about.md\"]","category":"page"},{"location":"about/#Credits","page":"About","title":"Credits","text":"","category":"section"},{"location":"about/","page":"About","title":"About","text":"These persons have contributed to JuliaReachDevDocs (in alphabetic order):","category":"page"},{"location":"about/","page":"About","title":"About","text":"Marcelo Forets\nChristian Schilling","category":"page"},{"location":"workflow/#Git-workflow","page":"Git workflow","title":"Git workflow","text":"","category":"section"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"This page contains some general information about the recommended workflow to develop JuliaReach projects and some frequently asked questions & git workflow tips.","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"Pages = [\"workflow.md\"]","category":"page"},{"location":"workflow/#Branches-and-pull-requests-(PR)","page":"Git workflow","title":"Branches and pull requests (PR)","text":"","category":"section"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"We use a standard pull request policy: You work in a private branch and eventually add a pull request, which is then reviewed by other programmers and merged into the master branch.","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"Each pull request should be pushed in a new branch with the name of the author followed by a descriptive name, e.g., mforets/my_feature. If the branch is associated to a previous discussion in one issue, we use the name of the issue for easier lookup, e.g., mforets/7.","category":"page"},{"location":"workflow/#Unit-testing-and-continuous-integration","page":"Git workflow","title":"Unit testing and continuous integration","text":"","category":"section"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"This project is synchronized with GitHub Actions such that each PR gets tested before merging (and the build is automatically triggered after each new commit). For the maintainability of this project, it is important to make all unit tests pass.","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"To run the unit tests locally, you can do:","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"julia> using Pkg\n\njulia> Pkg.test(\"MathematicalSets\")","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"We also advise adding new unit tests when adding new features to ensure long-term support of your contributions.","category":"page"},{"location":"workflow/#Contributing-to-the-documentation","page":"Git workflow","title":"Contributing to the documentation","text":"","category":"section"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"New functions and types should be documented according to our guidelines directly in the source code.","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"You can view the source code documentation from inside the REPL by typing ? followed by the name of the type or function. For example, the following command will print the documentation of the AbstractSet type:","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"julia> ?AbstractSet","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"This documentation you are currently reading is written in Markdown, and it relies on Documenter.jl to produce the HTML layout. The sources for creating this documentation are found in docs/src. You can easily include the documentation that you wrote for your functions or types there (see the Documenter.jl guide or our sources for examples).","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"To generate the documentation locally, run make.jl, e.g., by executing the following command in the terminal:","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"Note that this also runs all doctests which will take some time.","category":"page"},{"location":"workflow/#Reviewing-a-pull-request-from-a-fork","page":"Git workflow","title":"Reviewing a pull request from a fork","text":"","category":"section"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"To pull a PR numbered x from a fork, do","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"$ git fetch origin pull/x/head:pr/x && git checkout pr/x","category":"page"},{"location":"workflow/#Contributing-from-a-fork","page":"Git workflow","title":"Contributing from a fork","text":"","category":"section"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"It is not uncommon that user A wants to contribute to package X and A doesn't have write access to X. In that case, the usual procedure is that A creates a fork of X, and then creates a PR to be merged by the maintainer of package X. You have to properly setup the branches to do so:","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"origin   â is usually set to the fork of the project\nupstream â is usually set to the main project","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"For example, suppose that user mforets would like to setup the package Polyhedra working from a fork. The git command git remote -v prints all the remote repositories, and you can modify them with git remote add to add a new one and git remote set-url to change the URL of an existing repository (it is also possible to manually edit the file .git/config). In the example:","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"[mforets@localhost dev]$ cd Polyhedra\n\n[mforets@localhost Polyhedra]$ git remote -v\norigin  https://github.com/JuliaPolyhedra/Polyhedra.jl.git (fetch)\norigin  https://github.com/JuliaPolyhedra/Polyhedra.jl.git (push)\n\n[mforets@localhost Polyhedra]$ git remote add upstream https://github.com/JuliaPolyhedra/Polyhedra.jl.git\n\n[mforets@localhost Polyhedra]$ git remote set-url origin https://github.com/mforets/Polyhedra.jl.git\n\n[mforets@localhost Polyhedra]$ git remote -v\norigin  https://github.com/mforets/Polyhedra.jl.git (fetch)\norigin  https://github.com/mforets/Polyhedra.jl.git (push)\n\nupstream        https://github.com/JuliaPolyhedra/Polyhedra.jl.git (fetch)\nupstream        https://github.com/JuliaPolyhedra/Polyhedra.jl.git (push)","category":"page"},{"location":"workflow/#Editors","page":"Git workflow","title":"Editors","text":"","category":"section"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"There is no official IDE for Julia. For those using the Atom editor, there are several plugins for Julia development, among them:","category":"page"},{"location":"workflow/","page":"Git workflow","title":"Git workflow","text":"language-julia â code highlighting, etc.\nlanguage-markdown â support for Markdown files\nlatex-completions â auto-completions, eg. for LaTeX symbols as in \\alpha[TAB] that prints Î±\nmarkdown-preview-plus â preview Markdown files\nplatformio-ide-terminal â terminal embedded in the editor","category":"page"},{"location":"guidelines/#Coding-guidelines","page":"Coding guidelines","title":"Coding guidelines","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"This section is a reference for commonly used coding guidelines adopted in JuliaReach projects. There are several style guides in the Julia ecosystem; see Other style guides for some of them.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Pages = [\"guidelines.md\"]\nDepth = 3","category":"page"},{"location":"guidelines/#Source-code-guidelines","page":"Coding guidelines","title":"Source-code guidelines","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"In general the guidelines follow the rules in the .JuliaFormatter.toml file.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Use 4 space characters for indentation.\nIn error messages, make the first word lowercase and do not add a period in the end.\nUse empty space in assignments:\nn=length(q) (no)\nn = length(q) (yes)\nThe previous convention has an exception: using = in keyword arguments:\nconvex_hull(p, algorithm = \"monotone_chain\") (no)\nconvex_hull(p, algorithm=\"monotone_chain\") (yes)\nUse empty space after commas:\nevaluate(p,D) (no)\nevaluate(p, D) (yes)\nTry to stay within 100 characters both for code and documentation. For type and function signatures this usually requires line breaks if there are many arguments or they have long names. In this case we write each argument in a new line if it looks better. If the offending line is a string, you can divide it into smaller chunks with *, as in:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"    @assert dim(P) == size(M, 2) \"a linear map of size $(size(M)) cannot be \" *\n                                 \"applied to a set of dimension $(dim(P))\"","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"note: Note\nThe 100 characters rule should not be enforced in all cases, but is rather a soft guideline.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Use the full function f() ... end instead of f() = .... However, the short form is preferable in constructors and aliases such as Ã(X::LazySet, Y::LazySet) = CartesianProduct(X, Y).\nUse the following conventions for type parameters:\nN for numeric types\nVN for vectors of numeric type N\nMN for matrices of numeric type N\nS for set types\nTo indicate helper functions that are not part of the API, use a leading underscore for the function name, as in _myfun.\nRead Julia's Style Guide.","category":"page"},{"location":"guidelines/#Documentation-guidelines","page":"Coding guidelines","title":"Documentation guidelines","text":"","category":"section"},{"location":"guidelines/#Generating-the-documentation","page":"Coding guidelines","title":"Generating the documentation","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"To generate the HTML documentation we rely on the docs/make.jl script that is interpreted using Julia's documentation generator package Documenter.jl. You can build the documentation locally and verify the changes with the following command:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"This will deploy the docs in docs/build with index.html being the start page.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Observe that the docs/build folder is and should not be included in the master branch: in fact, the build system automatically pushes this folder to the gh-pages branch after each commit. This means that each time that a commit is merged into the master branch in Github, the updated documentation will be available as soon as the continuous integration finishes (this usually takes a couple of minutes).","category":"page"},{"location":"guidelines/#Mathematical-notation","page":"Coding guidelines","title":"Mathematical notation","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Mathematical formulas are written in LaTeX inside double backticks. If possible you should use Unicode; otherwise remember that the backslash character should be written twice.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"``\\delta[TAB]A``","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Notice that the string is inside double back-ticks, and that we use the TAB key to transform into Unicode. In those cases where there is no Unicode character, you can use two backslash characters.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"``\\\\mathcal{X}_0``","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Finally, Documenter can also parse usual LaTeX dollar sign notation for the Markdown files. In that case, only one backslash is needed. For more examples consult Documenter.jl or check the various examples in our project's source code.","category":"page"},{"location":"guidelines/#Writing-docstrings","page":"Coding guidelines","title":"Writing docstrings","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"In this section we give the guidelines for writing docstrings of functions and types. We give two concrete examples. You can find more examples by searching in the source files.","category":"page"},{"location":"guidelines/#Documenting-functions","page":"Coding guidelines","title":"Documenting functions","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"The docstring of a function should consist of following parts, in the given order:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Part Category Description\nSignature Mandatory List the function's name and arguments (include the argument types and the return type, i.e., just copy the signature from the source code; mark optional arguments in brackets)\nBrief description Mandatory One-line purpose of the function\nInput Mandatory All input arguments, optional or not, and valid keyword arguments\nOutput Mandatory The return value(s) of the function together with a description; \"Nothing.\" if no value is returned.\nNotes Optional Additional details about the function\nAlgorithm Optional but recommended Details on the implementation and the relation to other functions\nExamples Optional but recommended Give concrete, self-contained applications of this function","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Below we provide a concrete example:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"\"\"\"\n    monotone_chain!(points::Vector{VN}; sort::Bool=true\n                   )::Vector{VN} where {VN<:AbstractVector{N}} where {N<:Real}\n\nCompute the convex hull of points in the plane using Andrew's monotone chain\nmethod.\n\n### Input\n\n- `points` -- list of 2D vectors; is sorted in-place inside this function\n- `sort`   -- (optional, default: `true`) flag for sorting the vertices\n              lexicographically; sortedness is required for correctness\n\n### Output\n\nList of vectors containing the 2D coordinates of the corner points of the\nconvex hull.\n\n### Notes\n\nFor large sets of points, it is convenient to use static vectors to get\nmaximum performance. For information on how to convert usual vectors\ninto static vectors, see the type `SVector` provided by the\n[StaticArrays](http://juliaarrays.github.io/StaticArrays.jl/stable/)\npackage.\n\n### Algorithm\n\nThis function implements Andrew's monotone chain convex hull algorithm to\nconstruct the convex hull of a set of ``n`` points in the plane in\n``O(n \\\\log n)`` time.\nFor further details see\n[Monotone chain](https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain)\n\"\"\"\nfunction monotone_chain!(points::Vector{VN}; sort::Bool=true\n                        )::Vector{VN} where {VN<:AbstractVector{N}} where {N<:Real}\n    ...\nend","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"The following example has an optional argument, and it is surrounded with square brackets in the docstring by convention.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"\"\"\"\n    radius(H::Hyperrectangle, [p]::Real=Inf)::Real\n\nReturn the radius of a hyperrectangle.\n\n### Input\n\n- `H` -- hyperrectangle\n- `p` -- (optional, default: `Inf`) norm\n\n### Output\n\nA real number representing the radius.\n\n### Notes\n\nThe radius is defined as the radius of the enclosing ball of the given\n``p``-norm of minimal volume with the same center.\n\"\"\"\nfunction radius(H::Hyperrectangle, p::Real=Inf)::Real\n    ...\nend","category":"page"},{"location":"guidelines/#Documenting-types","page":"Coding guidelines","title":"Documenting types","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"The docstring of a type should consist of the following parts:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Part Category Description\nSignature Mandatory Describe the interface of this type (just copy the signature from the source code)\nBrief description Mandatory One-line purpose of the type\nFields Mandatory Describe each field\nNotes Optional Additional details about the type\nExamples Optional but recommended Construction example (recommended if it has different constructors)","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Below we provide a concrete example:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"\n\"\"\"\n    DiscreteSystem <: AbstractSystem\n\nType that represents a system of discrete-time affine ODEs with nondeterministic\ninputs,\n\n``x_{k+1} = A x_{k} + u_{k}``\n\nwhere:\n\n- ``A`` is a square matrix\n- ``x(0) â \\\\mathcal{X}_0`` and ``\\\\mathcal{X}_0`` is a convex set\n- ``u_{k} â \\\\mathcal{U}_{k}``, where ``\\\\{\\\\mathcal{U}_{k}\\\\}_k`` is a\n  set-valued sequence defined over ``[0, Î´], ..., [(N-1)Î´, N Î´]`` for some\n  ``Î´>0``\n\n### Fields\n\n- `A`  -- square matrix, possibly of type `SparseMatrixExp`\n- `X0` -- set of initial states\n- `U`  -- nondeterministic inputs\n- `Î´`  -- discretization step\n\n### Examples\n\n- `DiscreteSystem(A::Union{AbstractMatrix{Float64}, SparseMatrixExp{Float64}},\n                  X0::LazySet,\n                  Î´::Float64,\n                  U::NonDeterministicInput)` -- default constructor\n- `DiscreteSystem(A::Union{AbstractMatrix{Float64}, SparseMatrixExp{Float64}},\n                  X0::LazySet,\n                  Î´::Float64)` -- constructor with no inputs\n- `DiscreteSystem(A::Union{AbstractMatrix{Float64}, SparseMatrixExp{Float64}},\n                  X0::LazySet,\n                  Î´::Float64,\n                  U::LazySet)` -- constructor that creates a\n  `ConstantNonDeterministicInput`\n- `DiscreteSystem(A::Union{AbstractMatrix{Float64}, SparseMatrixExp{Float64}},\n                  X0::LazySet,\n                  Î´::Float64,\n                  U::Vector{<:LazySet})` -- constructor that creates a\n  `TimeVaryingNonDeterministicInput`\n\"\"\"\nstruct DiscreteSystem <: AbstractSystem\n    ...\nend","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"The following is an example of an abstract type, parametric in N, which defines an interface and includes a doctest.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"\"\"\"\n    AbstractHPolygon{N<:Real} <: AbstractPolygon{N}\n\nAbstract type for polygons in H-representation (i.e., constraints).\n\n### Notes\n\nEvery concrete `AbstractHPolygon` must have the following fields:\n- `constraints_list::Vector{LinearConstraint{N}}` -- the constraints\n\n```jldoctest\njulia> subtypes(AbstractHPolygon)\n2-element Array{Union{DataType, UnionAll},1}:\n LazySets.HPolygon\n LazySets.HPolygonOpt\n```\n\"\"\"\nabstract type AbstractHPolygon{N<:Real} <: AbstractPolygon{N} end","category":"page"},{"location":"guidelines/#Writing-doctests","page":"Coding guidelines","title":"Writing doctests","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Using Documenter.jl, docstring examples can be incorporated to the doctesting framework using the jldoctest environment, see the Doctests section of the documentation.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Here are some additional tips:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"To have the required modules available in the current file, write the following in triple backticks (e.g., see docs/src/lib/representations.md or the documentation):","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"@meta\nDocTestSetup = quote\n    using LazySets\nend","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"To preserve definitions between blocks of code you can use labels. For example, use the environment jldoctest ball2_label.\nIf you use several lines in REPL mode (julia> ...), you will have to include empty lines between the commands. Otherwise the variables from the previous commands are not available below.\nThe doctests currently take a long time (~1min) because they generate some plots using Plots.jl. There is a line doctest = true in make.jl which you can set to false to allow building the documentation but skipping the doctests.","category":"page"},{"location":"guidelines/#Extending-the-online-documentation","page":"Coding guidelines","title":"Extending the online documentation","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"To add a function or a type in the online documentation, put the function's signature or type in a @docs block on the appropriate markdown (.md) file of the /docs/src folder.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"For example, let the function","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"function dim(P::AbstractPolygon)::Int\n   ...\nend","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"It is added in the documentation of the AbstractPolygon interface, /docs/src/lib/interfaces.md, in the following way:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"@docs\n...\ndim(P::AbstractPolygon)","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Note that output type annotations is not needed. Also the variable's name is not needed and one could equally have written dim(::AbstractPolygon).","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"In some cases, the function to be added contains an optional input. In those cases only the required arguments are needed. For instance, let:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"    linear_map(M::AbstractMatrix, P::AbstractPolygon{N};\n               output_type::Type{<:LazySet}=typeof(P)) where {N}","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"This function can be documented in a @docs block as:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"linear_map(::AbstractMatrix, P::AbstractPolygon{N}) where N","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"In cases when there is no function overload, it is sufficient to write the function's name. For example, the function with signature","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"function convex_hull!(points::Vector{VN};\n                      algorithm::String=\"monotone_chain\"\n                     )::Vector{VN} where {N<:Real, VN<:AbstractVector{N}}\n...\nend","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Is documented in /docs/src/lib/operations.md as:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"@docs\n...\nconvex_hull!","category":"page"},{"location":"guidelines/#Adding-plot-recipe-docstrings","page":"Coding guidelines","title":"Adding plot recipe docstrings","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"A plot recipe can be added to the docs using the extension RecipesBase.apply_recipe. Moreover, it is important that you use pass the Dict{Symbol,Any}-type argument that corresponds to the plotting options; this argument is added automatically by the @recipe macro. Consider the example below:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"\"\"\"\n    plot_emptyset(â::EmptySet, [Îµ]; ...)\n\nPlot an empty set.\n\n### Input\n\n- `â` -- empty set\n- `Îµ` -- (optional, default: `0`) ignored, used for dispatch\n\n### Output\n\nAn empty figure.\n\"\"\"\n@recipe function plot_emptyset(â::EmptySet{N}, Îµ::N=zero(N); label=\"\", grid=true,\n                               legend=false) where {N<:Real}\n    return []\nend","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"This example has an optional argument with default value. Inside a @docs block we can add the docstring as follows:","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"RecipesBase.apply_recipe(::Dict{Symbol,Any}, ::EmptySet{N}, ::N=zero(N)) where {N<:Real}","category":"page"},{"location":"guidelines/#Resizing-an-image-in-the-documentation","page":"Coding guidelines","title":"Resizing an image in the documentation","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"It is possible with Documenter to add content using raw HTML with the macro @raw. That lets, for example, to include an image and fix the size: between a @raw html block, write","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"<img src=\"path/to/image.png\" width=\"25%\"/>","category":"page"},{"location":"guidelines/#Other-style-guides","page":"Coding guidelines","title":"Other style guides","text":"","category":"section"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Below we list other Julia code style guides that we have found interesting.","category":"page"},{"location":"guidelines/","page":"Coding guidelines","title":"Coding guidelines","text":"Yet Another Style Guide For Julia\nJuMP.jl style guide\nJulia style guide\nColPrac â Describes some best practices for collaborating on repositories. Following these practices makes it easier for contributors (new and old) to understand what is expected of them.","category":"page"},{"location":"#JuliaReachDevDocs","page":"Home","title":"JuliaReachDevDocs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"JuliaReachDevDocs hosts resources for the JuliaReach github organization developers.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"newpkg.md\",\n    \"release.md\",\n    \"guidelines.md\"\n]\nDepth = 3","category":"page"}]
}
