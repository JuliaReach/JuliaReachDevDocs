var documenterSearchIndex = {"docs":
[{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"Pages = [\"release.md\"]\nDepth = 3","category":"page"},{"location":"release/#Creating-a-new-release-1","page":"Creating a new release","title":"Creating a new release","text":"","category":"section"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"This is a short step-by-step manual on how to make a new release of a package.","category":"page"},{"location":"release/#Choosing-a-new-release-version-1","page":"Creating a new release","title":"Choosing a new release version","text":"","category":"section"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"First you have to choose whether you want to create a patch release, a minor release, or a major release.","category":"page"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"Major releases are very rare cases for major breaking changes in the API, which should typically be avoided.\nMinor releases are used when some dependency has changed (e.g., a new dependency was added), a mild breaking change in the API was added, or some important feature was added.\nPatch releases are used for everything else.","category":"page"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"For more information, check Semantic Versioning.","category":"page"},{"location":"release/#Preparing-the-release-1","page":"Creating a new release","title":"Preparing the release","text":"","category":"section"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"Edit the file Project.toml and change the version number of the package to the new version. Make a new pull request and wait until CI passes and the PR gets merged.","category":"page"},{"location":"release/#Creating-a-new-release-2","page":"Creating a new release","title":"Creating a new release","text":"","category":"section"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"Choose the appropriate subsection for this step and locate the release notes. Usually we keep the release notes in the wiki part of the project (\"Release-log tracker\"). These release notes correspond to the development version of the package until the next release.","category":"page"},{"location":"release/#Creating-a-new-release-on-General-(Julia-ecosystem-packages-only)-1","page":"Creating a new release","title":"Creating a new release on General (Julia ecosystem packages only)","text":"","category":"section"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"If the package is released in the Julia ecosystem, a pull request to General has to be made to make new versions available. Registrator is used for this purpose. Find the issue named Releases in the issue tracker and write the following comment.","category":"page"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"@JuliaRegistrator register()","category":"page"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"This will let Registrator trigger a pull request to General. Check that everything works there and then wait until the pull request gets merged. Then the TagBot will create a new release on Github. Finally, you need to manually write the release notes for that release.","category":"page"},{"location":"release/#Creating-a-new-release-on-Github-1","page":"Creating a new release","title":"Creating a new release on Github","text":"","category":"section"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"If the package is not released in the Julia ecosystem, you can just manually create a release on Github with the corresponding release notes.","category":"page"},{"location":"release/#Clean-up-the-release-log-1","page":"Creating a new release","title":"Clean up the release log","text":"","category":"section"},{"location":"release/#","page":"Creating a new release","title":"Creating a new release","text":"Finally, remove the items from the release log in the wiki (keep the headlines, though).","category":"page"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"Pages = [\"newpkg.md\"]\nDepth = 3","category":"page"},{"location":"newpkg/#Adding-a-new-package-1","page":"Adding a new package","title":"Adding a new package","text":"","category":"section"},{"location":"newpkg/#Creating-the-github-repository-1","page":"Adding a new package","title":"Creating the github repository","text":"","category":"section"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"To create an empty repository, go to your user name and click on New. If you have write access to the JuliaReach org, click on New on the top-right or go to the link Create a new repository.","category":"page"},{"location":"newpkg/#Creating-the-Julia-package-1","page":"Adding a new package","title":"Creating the Julia package","text":"","category":"section"},{"location":"newpkg/#Using-JuliaReachTemplatePkg-1","page":"Adding a new package","title":"Using JuliaReachTemplatePkg","text":"","category":"section"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"The github repository JuliaReachTemplatePkg contains a template package for JuliaReach projects.","category":"page"},{"location":"newpkg/#Using-PkgTemplates-1","page":"Adding a new package","title":"Using PkgTemplates","text":"","category":"section"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"Alternatively, an easy way to create an empty package is to use PkgTemplates. An example is given below:","category":"page"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"julia> using PkgTemplates\n\njulia> t = Template(; user=\"JuliaReach\", license=\"MIT\",\n                      authors=[\"Marcelo Forets\", \"BenoÃ®t Legat\", \"Christian Schilling\"],\n                      plugins=[TravisCI(), Codecov(), AppVeyor(), GitHubPages()])\n\njulia> generate(\"MathematicalSets\", t)","category":"page"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"Some settings are used in JuliaReach's projects: ","category":"page"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"update the README\nadd the style for docs in docs/assets/juliareach.css","category":"page"},{"location":"newpkg/#Deploying-the-documentation-1","page":"Adding a new package","title":"Deploying the documentation","text":"","category":"section"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"Follow the guidelines described in Documenter.jl's manual: Hosting documentation.","category":"page"},{"location":"newpkg/#Integrating-the-repository-with-gitter-1","page":"Adding a new package","title":"Integrating the repository with gitter","text":"","category":"section"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"Github uses Webhooks to set up GitHub Apps which subscribe to certain events on github repositories. To make your newly created package under https://github.com/JuliaReach to be integrated with the main gitter channel https://gitter.im/JuliaReach/Lobby, do the following steps:","category":"page"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"In gitter, go to Room settings, then click on Integrations.\nSelect Add an integration (Github).\nYou may be asked to grant write access.\nIn the tab Pick which repositories you want to subscribe to:, select the new created project.","category":"page"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"note: Note\nIf the project is hosted under the org, gitter should have been granted write access to it; see this FAQ for details.","category":"page"},{"location":"newpkg/#Adding-requirements-1","page":"Adding a new package","title":"Adding requirements","text":"","category":"section"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"These are links we have found useful:","category":"page"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"Testing specific dependencies\nGetting a valid uuid:","category":"page"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"julia> using Pkg\n\njulia> Pkg.METADATA_compatible_uuid(\"LazySets\")\nUUID(\"b4f0291d-fe17-52bc-9479-3d1a343d9043\")","category":"page"},{"location":"newpkg/#Adding-code-coverage-1","page":"Adding a new package","title":"Adding code coverage","text":"","category":"section"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"Enable codecov in the .travis.yml file:","category":"page"},{"location":"newpkg/#","page":"Adding a new package","title":"Adding a new package","text":"codecov: true\nlanguage: julia\n...","category":"page"},{"location":"about/#About-1","page":"About","title":"About","text":"","category":"section"},{"location":"about/#","page":"About","title":"About","text":"This page contains some general information about this repository.","category":"page"},{"location":"about/#","page":"About","title":"About","text":"Pages = [\"about.md\"]","category":"page"},{"location":"about/#Credits-1","page":"About","title":"Credits","text":"","category":"section"},{"location":"about/#","page":"About","title":"About","text":"These persons have contributed to JuliaReachDevDocs (in alphabetic order):","category":"page"},{"location":"about/#","page":"About","title":"About","text":"Marcelo Forets\nChristian Schilling","category":"page"},{"location":"workflow/#Git-workflow-1","page":"Git workflow","title":"Git workflow","text":"","category":"section"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"This page contains some general information about the recommended workflow to develop JuliaReach projects and some FAQs.","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"Pages = [\"workflow.md\"]","category":"page"},{"location":"workflow/#Branches-and-pull-requests-(PR)-1","page":"Git workflow","title":"Branches and pull requests (PR)","text":"","category":"section"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"We use a standard pull request policy: You work in a private branch and eventually add a pull request, which is then reviewed by other programmers and merged into the master branch.","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"Each pull request should be pushed in a new branch with the name of the author followed by a descriptive name, e.g., mforets/my_feature. If the branch is associated to a previous discussion in one issue, we use the name of the issue for easier lookup, e.g., mforets/7.","category":"page"},{"location":"workflow/#Unit-testing-and-continuous-integration-(CI)-1","page":"Git workflow","title":"Unit testing and continuous integration (CI)","text":"","category":"section"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"This project is synchronized with Travis CI such that each PR gets tested before merging (and the build is automatically triggered after each new commit). For the maintainability of this project, it is important to understand and fix the failing doctests if they exist. We develop in Julia v0.6.0, but for experimentation we also build on the nightly branch.","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"When you modify code in this package, you should make sure that all unit tests pass. To run the unit tests locally, you should do:","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"$ julia --color=yes test/runtests.jl","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"Alternatively, you can achieve the same from inside the REPL using the following command:","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"julia> using Pkg\njulia> Pkg.test(\"MathematicalSets\")","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"We also advise adding new unit tests when adding new features to ensure long-term support of your contributions.","category":"page"},{"location":"workflow/#Contributing-to-the-documentation-1","page":"Git workflow","title":"Contributing to the documentation","text":"","category":"section"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"New functions and types should be documented according to our guidelines directly in the source code.","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"You can view the source code documentation from inside the REPL by typing ? followed by the name of the type or function. For example, the following command will print the documentation of the AbstractSet type:","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"julia> ?AbstractSet","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"This documentation you are currently reading is written in Markdown, and it relies on Documenter.jl to produce the HTML layout. The sources for creating this documentation are found in docs/src. You can easily include the documentation that you wrote for your functions or types there (see the Documenter.jl guide or our sources for examples).","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"To generate the documentation locally, run make.jl, e.g., by executing the following command in the terminal:","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"Note that this also runs all doctests which will take some time.","category":"page"},{"location":"workflow/#FAQ-1","page":"Git workflow","title":"FAQ","text":"","category":"section"},{"location":"workflow/#How-to-review-a-pull-request-from-a-fork-1","page":"Git workflow","title":"How to review a pull request from a fork","text":"","category":"section"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"To pull a PR numbered x from a fork, do","category":"page"},{"location":"workflow/#","page":"Git workflow","title":"Git workflow","text":"$ git fetch origin pull/x/head:pr/x && git checkout pr/x","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Pages = [\"guidelines.md\"]\nDepth = 3","category":"page"},{"location":"guidelines/#Coding-guidelines-1","page":"Coding guidelines","title":"Coding guidelines","text":"","category":"section"},{"location":"guidelines/#Source-code-guidelines-1","page":"Coding guidelines","title":"Source-code guidelines","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Use 4 space characters for indentation.\nIn error messages, make the first word lowercase and do not add a period in the end.\nUse empty space in assignments:\nn=length(q) :thumbsdown:\nn = length(q) :thumbsup:\nThe previous convention has an exception: using = in keyword arguments:\nconvex_hull(p, algorithm = \"monotone_chain\") :thumbsdown:\nconvex_hull(p, algorithm=\"monotone_chain\") :thumbsup:\nUse empty space after commas:\nevaluate(p,D) :thumbsdown:\nevaluate(p, D) :thumbsup:\nTry to stay within 80 characters both for code and documentation. For type and function signatures this usually requires line breaks if there are many arguments or they have long names. In this case we write each argument in a new line if it looks better. If the offending line is a string, you can divide it into smaller chunks with *, as in:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"    @assert dim(P) == size(M, 2) \"a linear map of size $(size(M)) cannot be \" *\n                                 \"applied to a set of dimension $(dim(P))\"","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"note: Note\nThe 80 characters rule should not be enforced in all cases, but is rather a soft guideline.","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Use the full function f() ... end instead of f() = .... However, the short form is preferable in constructors and aliases such as Ã(X::LazySet, Y::LazySet) = CartesianProduct(X, Y).\nUse the following conventions for type parameters:\nN for numeric types\nVN for vectors of numeric type N\nMN for matrices of numeric type N\nS for set types\nTo indicate helper functions that are not part of the API, use a leading underscore for the function name, as in _myfun.\nRead Julia's Style Guide.","category":"page"},{"location":"guidelines/#Documentation-guidelines-1","page":"Coding guidelines","title":"Documentation guidelines","text":"","category":"section"},{"location":"guidelines/#Generating-the-documentation-1","page":"Coding guidelines","title":"Generating the documentation","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"To generate the HTML documentation we rely on the docs/make.jl script that is interpreted using Julia's documentation generator package Documenter.jl. You can build the documentation locally and verify the changes with the following command:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"This will deploy the docs in docs/build with index.html being the start page.","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Observe that the docs/build folder is and should not be included in the master branch: in fact, the build system automatically pushes this folder to the gh-pages branch after each commit. This means that each time that a commit is merged into the master branch in Github, the updated documentation will be available as soon as the continuous integration finishes (this usually takes a couple of minutes).","category":"page"},{"location":"guidelines/#Mathematical-notation-1","page":"Coding guidelines","title":"Mathematical notation","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Mathematical formulas are written in LaTeX inside double backticks. If possible you should use Unicode; otherwise remember that the backslash character should be written twice.","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"``\\delta[TAB]A``","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Notice that the string is inside double back-ticks, and that we use the TAB key to transform into Unicode. In those cases where there is no Unicode character, you can use two backslash characters.","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"``\\\\mathcal{X}_0``","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Finally, Documenter can also parse usual LaTeX dollar sign notation for the Markdown files. In that case, only one backslash is needed. For more examples consult Documenter.jl or check the various examples in our project's source code.","category":"page"},{"location":"guidelines/#Writing-docstrings-1","page":"Coding guidelines","title":"Writing docstrings","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"In this section we give the guidelines for writing docstrings of functions and types. We give two concrete examples. You can find more examples by searching in the source files.","category":"page"},{"location":"guidelines/#Documenting-functions-1","page":"Coding guidelines","title":"Documenting functions","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"The docstring of a function should consist of following parts, in the given order:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Part Category Description\nSignature Mandatory List the function's name and arguments (include the argument types and the return type, i.e., just copy the signature from the source code; mark optional arguments in brackets)\nBrief description Mandatory One-line purpose of the function\nInput Mandatory All input arguments, optional or not, and valid keyword arguments\nOutput Mandatory The return value(s) of the function together with a description; \"Nothing.\" if no value is returned.\nNotes Optional Additional details about the function\nAlgorithm Optional but recommended Details on the implementation and the relation to other functions\nExamples Optional but recommended Give concrete, self-contained applications of this function","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Below we provide a concrete example:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"\"\"\"\n    monotone_chain!(points::Vector{VN}; sort::Bool=true\n                   )::Vector{VN} where {VN<:AbstractVector{N}} where {N<:Real}\n\nCompute the convex hull of points in the plane using Andrew's monotone chain\nmethod.\n\n### Input\n\n- `points` -- list of 2D vectors; is sorted in-place inside this function\n- `sort`   -- (optional, default: `true`) flag for sorting the vertices\n              lexicographically; sortedness is required for correctness\n\n### Output\n\nList of vectors containing the 2D coordinates of the corner points of the\nconvex hull.\n\n### Notes\n\nFor large sets of points, it is convenient to use static vectors to get\nmaximum performance. For information on how to convert usual vectors\ninto static vectors, see the type `SVector` provided by the\n[StaticArrays](http://juliaarrays.github.io/StaticArrays.jl/stable/)\npackage.\n\n### Algorithm\n\nThis function implements Andrew's monotone chain convex hull algorithm to\nconstruct the convex hull of a set of ``n`` points in the plane in\n``O(n \\\\log n)`` time.\nFor further details see\n[Monotone chain](https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain)\n\"\"\"\nfunction monotone_chain!(points::Vector{VN}; sort::Bool=true\n                        )::Vector{VN} where {VN<:AbstractVector{N}} where {N<:Real}\n    ...\nend","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"The following example has an optional argument, and it is surrounded with square brackets in the docstring by convention.","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"\"\"\"\n    radius(H::Hyperrectangle, [p]::Real=Inf)::Real\n\nReturn the radius of a hyperrectangle.\n\n### Input\n\n- `H` -- hyperrectangle\n- `p` -- (optional, default: `Inf`) norm\n\n### Output\n\nA real number representing the radius.\n\n### Notes\n\nThe radius is defined as the radius of the enclosing ball of the given\n``p``-norm of minimal volume with the same center.\n\"\"\"\nfunction radius(H::Hyperrectangle, p::Real=Inf)::Real\n    ...\nend","category":"page"},{"location":"guidelines/#Documenting-types-1","page":"Coding guidelines","title":"Documenting types","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"The docstring of a type should consist of the following parts:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Part Category Description\nSignature Mandatory Describe the interface of this type (just copy the signature from the source code)\nBrief description Mandatory One-line purpose of the type\nFields Mandatory Describe each field\nNotes Optional Additional details about the type\nExamples Optional but recommended Construction example (recommended if it has different constructors)","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Below we provide a concrete example:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"\n\"\"\"\n    DiscreteSystem <: AbstractSystem\n\nType that represents a system of discrete-time affine ODEs with nondeterministic\ninputs,\n\n``x_{k+1} = A x_{k} + u_{k}``\n\nwhere:\n\n- ``A`` is a square matrix\n- ``x(0) â \\\\mathcal{X}_0`` and ``\\\\mathcal{X}_0`` is a convex set\n- ``u_{k} â \\\\mathcal{U}_{k}``, where ``\\\\{\\\\mathcal{U}_{k}\\\\}_k`` is a\n  set-valued sequence defined over ``[0, Î´], ..., [(N-1)Î´, N Î´]`` for some\n  ``Î´>0``\n\n### Fields\n\n- `A`  -- square matrix, possibly of type `SparseMatrixExp`\n- `X0` -- set of initial states\n- `U`  -- nondeterministic inputs\n- `Î´`  -- discretization step\n\n### Examples\n\n- `DiscreteSystem(A::Union{AbstractMatrix{Float64}, SparseMatrixExp{Float64}},\n                  X0::LazySet,\n                  Î´::Float64,\n                  U::NonDeterministicInput)` -- default constructor\n- `DiscreteSystem(A::Union{AbstractMatrix{Float64}, SparseMatrixExp{Float64}},\n                  X0::LazySet,\n                  Î´::Float64)` -- constructor with no inputs\n- `DiscreteSystem(A::Union{AbstractMatrix{Float64}, SparseMatrixExp{Float64}},\n                  X0::LazySet,\n                  Î´::Float64,\n                  U::LazySet)` -- constructor that creates a\n  `ConstantNonDeterministicInput`\n- `DiscreteSystem(A::Union{AbstractMatrix{Float64}, SparseMatrixExp{Float64}},\n                  X0::LazySet,\n                  Î´::Float64,\n                  U::Vector{<:LazySet})` -- constructor that creates a\n  `TimeVaryingNonDeterministicInput`\n\"\"\"\nstruct DiscreteSystem <: AbstractSystem\n    ...\nend","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"The following is an example of an abstract type, parametric in N, which defines an interface and includes a doctest.","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"\"\"\"\n    AbstractHPolygon{N<:Real} <: AbstractPolygon{N}\n\nAbstract type for polygons in H-representation (i.e., constraints).\n\n### Notes\n\nEvery concrete `AbstractHPolygon` must have the following fields:\n- `constraints_list::Vector{LinearConstraint{N}}` -- the constraints\n\n```jldoctest\njulia> subtypes(AbstractHPolygon)\n2-element Array{Union{DataType, UnionAll},1}:\n LazySets.HPolygon   \n LazySets.HPolygonOpt\n```\n\"\"\"\nabstract type AbstractHPolygon{N<:Real} <: AbstractPolygon{N} end","category":"page"},{"location":"guidelines/#Writing-doctests-1","page":"Coding guidelines","title":"Writing doctests","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Using Documenter.jl, docstring examples can be incorporated to the doctesting framework using the jldoctest environment, see the Doctests section of the documentation.","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Here are some additional tips:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"To have the required modules available in the current file, write the following in triple backticks (e.g., see docs/src/lib/representations.md or the documentation):","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"@meta\nDocTestSetup = quote\n    using LazySets\nend","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"To preserve definitions between blocks of code you can use labels. For example, use the environment jldoctest ball2_label.\nIf you use several lines in REPL mode (julia> ...), you will have to include empty lines between the commands. Otherwise the variables from the previous commands are not available below.\nThe doctests currently take a long time (~1min) because they generate some plots using Plots.jl. There is a line doctest = true in make.jl which you can set to false to allow building the documentation but skipping the doctests.","category":"page"},{"location":"guidelines/#Extending-the-online-documentation-1","page":"Coding guidelines","title":"Extending the online documentation","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"To add a function or a type in the online documentation, put the function's signature or type in a @docs block on the appropriate markdown (.md) file of the /docs/src folder.","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"For example, let the function","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"function dim(P::AbstractPolygon)::Int\n   ...\nend","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"It is added in the documentation of the AbstractPolygon interface, /docs/src/lib/interfaces.md, in the following way:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"@docs\n...\ndim(P::AbstractPolygon)","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Note that output type annotations is not needed. Also the variable's name is not needed and one could equally have written dim(::AbstractPolygon).","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"In some cases, the function to be added contains an optional input. In those cases only the required arguments are needed. For instance, let:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"    linear_map(M::AbstractMatrix, P::AbstractPolygon{N};\n               output_type::Type{<:LazySet}=typeof(P)) where {N}","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"This function can be documented in a @docs block as:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"linear_map(::AbstractMatrix, P::AbstractPolygon{N}) where N","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"In cases when there is no function overload, it is sufficient to write the function's name. For example, the function with signature","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"function convex_hull!(points::Vector{VN};\n                      algorithm::String=\"monotone_chain\"\n                     )::Vector{VN} where {N<:Real, VN<:AbstractVector{N}}\n...\nend","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Is documented in /docs/src/lib/operations.md as:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"@docs\n...\nconvex_hull!","category":"page"},{"location":"guidelines/#Adding-plot-recipe-docstrings-1","page":"Coding guidelines","title":"Adding plot recipe docstrings","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"A plot recipe can be added to the docs using the extension RecipesBase.apply_recipe. Moreover, it is important that you use pass the Dict{Symbol,Any}-type argument that corresponds to the plotting options; this argument is added automatically by the @recipe macro. Consider the example below:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"\"\"\"\n    plot_emptyset(â::EmptySet, [Îµ]; ...)\n\nPlot an empty set.\n\n### Input\n\n- `â` -- empty set\n- `Îµ` -- (optional, default: `0`) ignored, used for dispatch\n\n### Output\n\nAn empty figure.\n\"\"\"\n@recipe function plot_emptyset(â::EmptySet{N}, Îµ::N=zero(N); label=\"\", grid=true,\n                               legend=false) where {N<:Real}\n    return []\nend","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"This example has an optional argument with default value. Inside a @docs block we can add the docstring as follows:","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"RecipesBase.apply_recipe(::Dict{Symbol,Any}, ::EmptySet{N}, ::N=zero(N)) where {N<:Real}","category":"page"},{"location":"guidelines/#Other-style-guides-1","page":"Coding guidelines","title":"Other style guides","text":"","category":"section"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Below we list other Julia code style guides that we have found interesting. ","category":"page"},{"location":"guidelines/#","page":"Coding guidelines","title":"Coding guidelines","text":"Yet Another Style Guide For Julia\nJuMP.jl style guide\nJulia style guide","category":"page"},{"location":"#JuliaReachDevDocs-1","page":"Home","title":"JuliaReachDevDocs","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"JuliaReachDevDocs hosts resources for JuliaReach org developers.","category":"page"},{"location":"#Contents-1","page":"Home","title":"Contents","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"newpkg.md\",\n    \"release.md\",\n    \"guidelines.md\"\n]\nDepth = 3","category":"page"}]
}
